"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const itemRepository = require("../repositories/Item");
const Utils = require("../../utils/utils");
const item_1 = require("../validators/item");
const mongoose = require("mongoose");
const service_1 = require("../../errors/service");
async function list(filter) {
    try {
        filter = JSON.parse(filter);
    }
    catch (e) {
        throw new service_1.ServiceError('parameter-not-expected');
    }
    if (!filter.name) {
        delete filter.name;
    }
    if (!filter.status) {
        delete filter.status;
    }
    return await itemRepository.list(await Utils.addLike(filter));
}
exports.list = list;
async function findById(id) {
    if (!mongoose.Types.ObjectId.isValid(id))
        throw new service_1.ServiceError('invalid-object-id');
    return await itemRepository.findById(id);
}
exports.findById = findById;
async function saveItem(item) {
    await item_1.validate(item);
    return await itemRepository.saveItem(item);
}
exports.saveItem = saveItem;
async function deleteItem(id) {
    if (!mongoose.Types.ObjectId.isValid(id))
        throw new service_1.ServiceError('invalid-object-id');
    return await itemRepository.deleteItem(id);
}
exports.deleteItem = deleteItem;
async function updateItem(item) {
    await item_1.validate(item);
    const alreadyExists = await findById(item._id);
    if (!alreadyExists)
        throw new service_1.ServiceError('item-not-found');
    return await itemRepository.updateItem(item);
}
exports.updateItem = updateItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9hZG1pbi9zZXJ2aWNlcy9JdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdURBQXVEO0FBRXZELDJDQUEyQztBQUMzQyw2Q0FBOEM7QUFDOUMscUNBQXFDO0FBQ3JDLGtEQUFvRDtBQUU3QyxLQUFLLGVBQWUsTUFBVztJQUNsQyxJQUFJLENBQUM7UUFDRCxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNULE1BQU0sSUFBSSxzQkFBWSxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDaEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLENBQUM7QUFoQkQsb0JBZ0JDO0FBQ00sS0FBSyxtQkFBbUIsRUFBVTtJQUNyQyxFQUFFLENBQUEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUFDLE1BQU0sSUFBSSxzQkFBWSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFFckYsTUFBTSxDQUFDLE1BQU0sY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBSkQsNEJBSUM7QUFFTSxLQUFLLG1CQUFtQixJQUFXO0lBQ3RDLE1BQU0sZUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXJCLE1BQU0sQ0FBQyxNQUFNLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUpELDRCQUlDO0FBRU0sS0FBSyxxQkFBcUIsRUFBVTtJQUN2QyxFQUFFLENBQUEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUFDLE1BQU0sSUFBSSxzQkFBWSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFFckYsTUFBTSxDQUFDLE1BQU0sY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBSkQsZ0NBSUM7QUFFTSxLQUFLLHFCQUFxQixJQUFXO0lBQ3hDLE1BQU0sZUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXJCLE1BQU0sYUFBYSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUvQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUFDLE1BQU0sSUFBSSxzQkFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFFN0QsTUFBTSxDQUFDLE1BQU0sY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBUkQsZ0NBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpdGVtUmVwb3NpdG9yeSBmcm9tICcuLi9yZXBvc2l0b3JpZXMvSXRlbSc7XG5pbXBvcnQgeyBJSXRlbSB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvSUl0ZW0nO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgdmFsaWRhdGUgfSBmcm9tICcuLi92YWxpZGF0b3JzL2l0ZW0nO1xuaW1wb3J0ICogYXMgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xuaW1wb3J0IHsgU2VydmljZUVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3NlcnZpY2UnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGlzdChmaWx0ZXI6IGFueSkgeyAgICAgICBcbiAgICB0cnkge1xuICAgICAgICBmaWx0ZXIgPSBKU09OLnBhcnNlKGZpbHRlcik7IFxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFNlcnZpY2VFcnJvcigncGFyYW1ldGVyLW5vdC1leHBlY3RlZCcpOyBcbiAgICB9ICAgXG4gICAgXG4gICAgaWYoIWZpbHRlci5uYW1lKSB7XG4gICAgICAgIGRlbGV0ZSBmaWx0ZXIubmFtZTtcbiAgICB9ICAgXG5cbiAgICBpZighZmlsdGVyLnN0YXR1cykge1xuICAgICAgICBkZWxldGUgZmlsdGVyLnN0YXR1cztcbiAgICB9ICBcbiAgICBcbiAgICByZXR1cm4gYXdhaXQgaXRlbVJlcG9zaXRvcnkubGlzdChhd2FpdCBVdGlscy5hZGRMaWtlKGZpbHRlcikpO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRCeUlkKGlkOiBudW1iZXIpIHtcbiAgICBpZighbW9uZ29vc2UuVHlwZXMuT2JqZWN0SWQuaXNWYWxpZChpZCkpIHRocm93IG5ldyBTZXJ2aWNlRXJyb3IoJ2ludmFsaWQtb2JqZWN0LWlkJyk7XG5cbiAgICByZXR1cm4gYXdhaXQgaXRlbVJlcG9zaXRvcnkuZmluZEJ5SWQoaWQpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUl0ZW0oaXRlbTogSUl0ZW0pIHtcbiAgICBhd2FpdCB2YWxpZGF0ZShpdGVtKTtcblxuICAgIHJldHVybiBhd2FpdCBpdGVtUmVwb3NpdG9yeS5zYXZlSXRlbShpdGVtKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUl0ZW0oaWQ6IHN0cmluZykge1xuICAgIGlmKCFtb25nb29zZS5UeXBlcy5PYmplY3RJZC5pc1ZhbGlkKGlkKSkgdGhyb3cgbmV3IFNlcnZpY2VFcnJvcignaW52YWxpZC1vYmplY3QtaWQnKTtcblxuICAgIHJldHVybiBhd2FpdCBpdGVtUmVwb3NpdG9yeS5kZWxldGVJdGVtKGlkKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUl0ZW0oaXRlbTogSUl0ZW0pIHtcbiAgICBhd2FpdCB2YWxpZGF0ZShpdGVtKTtcblxuICAgIGNvbnN0IGFscmVhZHlFeGlzdHMgPSBhd2FpdCBmaW5kQnlJZChpdGVtLl9pZCk7XG4gICAgXG4gICAgaWYgKCFhbHJlYWR5RXhpc3RzKSB0aHJvdyBuZXcgU2VydmljZUVycm9yKCdpdGVtLW5vdC1mb3VuZCcpO1xuXG4gICAgcmV0dXJuIGF3YWl0IGl0ZW1SZXBvc2l0b3J5LnVwZGF0ZUl0ZW0oaXRlbSk7XG59Il19