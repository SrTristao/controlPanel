"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jwt = require("jsonwebtoken");
const config = require("../../config");
async function generateToken(data) {
    return await jwt.sign(data, config.SALT_KEY, { expiresIn: '1d' });
}
exports.generateToken = generateToken;
async function decodeToken(req, res, next) {
    try {
        const token = req.get('Authorization') || `bearer ${req.query.t || req.body.authToken}`;
        if (!token)
            return next();
        req.user = await verify(token.split(' ')[1]);
        next();
    }
    catch (err) {
        next();
    }
}
exports.decodeToken = decodeToken;
function verify(token) {
    return new Promise((resolve, reject) => {
        jwt.verify(token, config.SALT_KEY, (err, decoded) => {
            if (err || !decoded) {
                return reject(resolveVerifyError(err));
            }
            resolve(decoded._doc);
        });
    });
}
exports.verify = verify;
function resolveVerifyError(err) {
    if (!err) {
        return new Error('token-type-not-match');
    }
    switch (err.name) {
        case 'TokenExpiredError':
            return new Error('token-expired');
        default:
            return new Error('token-invalid');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc2VydmVyL2FkbWluL21pZGRsZXdhcmVzL2F1dGgtc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUFvQztBQUNwQyx1Q0FBdUM7QUFHaEMsS0FBSyx3QkFBd0IsSUFBUztJQUN6QyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUZELHNDQUVDO0FBRU0sS0FBSyxzQkFBc0IsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtJQUMvRSxJQUFJLENBQUM7UUFDSCxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN4RixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUUxQixHQUFHLENBQUMsSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU3QyxJQUFJLEVBQUUsQ0FBQztJQUNULENBQUM7SUFBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDO0FBQ0gsQ0FBQztBQVhELGtDQVdDO0FBRUQsZ0JBQXVCLEtBQWE7SUFDbEMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEVBQUUsT0FBWSxFQUFFLEVBQUU7WUFDdkQsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7WUFDRCxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBVEQsd0JBU0M7QUFFRCw0QkFBNEIsR0FBVTtJQUNwQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDVCxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakIsS0FBSyxtQkFBbUI7WUFDdEIsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BDO1lBQ0UsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XG5pbXBvcnQgKiBhcyBjb25maWcgZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7IE5leHRGdW5jdGlvbiwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlVG9rZW4oZGF0YTogYW55KSB7XG4gICAgcmV0dXJuIGF3YWl0IGp3dC5zaWduKGRhdGEsIGNvbmZpZy5TQUxUX0tFWSwge2V4cGlyZXNJbjogJzFkJ30pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVjb2RlVG9rZW4ocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pOiBQcm9taXNlPHZvaWQ+IHtcbiAgdHJ5IHsgICAgXG4gICAgY29uc3QgdG9rZW4gPSByZXEuZ2V0KCdBdXRob3JpemF0aW9uJykgfHwgYGJlYXJlciAke3JlcS5xdWVyeS50IHx8IHJlcS5ib2R5LmF1dGhUb2tlbn1gOyAgXG4gICAgaWYgKCF0b2tlbikgcmV0dXJuIG5leHQoKTtcblxuICAgIHJlcS51c2VyID0gYXdhaXQgdmVyaWZ5KHRva2VuLnNwbGl0KCcgJylbMV0pO1xuICBcbiAgICBuZXh0KCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIG5leHQoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5KHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4geyAgICBcbiAgcmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGp3dC52ZXJpZnkodG9rZW4sIGNvbmZpZy5TQUxUX0tFWSwgKGVyciwgZGVjb2RlZDogYW55KSA9PiB7ICAgICAgXG4gICAgICBpZiAoZXJyIHx8ICFkZWNvZGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3QocmVzb2x2ZVZlcmlmeUVycm9yKGVycikpO1xuICAgICAgfSAgICAgIFxuICAgICAgcmVzb2x2ZShkZWNvZGVkLl9kb2MpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVZlcmlmeUVycm9yKGVycjogRXJyb3IpOiBFcnJvciB7XG4gIGlmICghZXJyKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcigndG9rZW4tdHlwZS1ub3QtbWF0Y2gnKTtcbiAgfVxuXG4gIHN3aXRjaCAoZXJyLm5hbWUpIHtcbiAgICBjYXNlICdUb2tlbkV4cGlyZWRFcnJvcic6XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCd0b2tlbi1leHBpcmVkJyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ3Rva2VuLWludmFsaWQnKTtcbiAgfVxufSJdfQ==