"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const itemService = require("../../services/Item");
const const_1 = require("../../../utils/const");
const itemRepository = require("../../repositories/Item");
async function findById(req, res, next) {
    try {
        const result = await itemService.findById(req.params.id);
        if (result)
            res.status(200).send(result);
        else
            res.status(401).send({ message: const_1.CONST.MSG.ERR.FINDBYID });
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.findById = findById;
async function list(req, res, next) {
    try {
        const result = await itemService.list(req.params.filter);
        res.status(200).send(result);
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.list = list;
async function saveItem(req, res, next) {
    try {
        const result = await itemService.saveItem(req.body);
        if (result)
            res.status(200).send({ message: const_1.CONST.MSG.SUCCESS.SAVE, item: result });
        else
            res.status(401).send({ message: const_1.CONST.MSG.ERR.SAVE });
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.saveItem = saveItem;
async function deleteItem(req, res, next) {
    try {
        const result = await itemService.deleteItem(req.params.id);
        if (result)
            res.status(200).send({ message: const_1.CONST.MSG.SUCCESS.DELETE });
        else
            res.status(401).send({ message: const_1.CONST.MSG.ERR.DELETE });
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.deleteItem = deleteItem;
async function updateItem(req, res, next) {
    try {
        const result = await itemService.updateItem(req.body);
        if (result)
            res.status(200).send({ message: const_1.CONST.MSG.SUCCESS.UPDATE });
        else
            res.status(401).send({ message: const_1.CONST.MSG.ERR.UPDATE });
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.updateItem = updateItem;
async function lastInserts(req, res, next) {
    try {
        const result = await itemRepository.lastInserts();
        res.status(200).send(result);
    }
    catch (err) {
        next(err);
    }
}
exports.lastInserts = lastInserts;
async function totItems(req, res, next) {
    try {
        const result = await itemRepository.selectCount();
        res.status(200).send({ count: result });
    }
    catch (err) {
        next(err);
    }
}
exports.totItems = totItems;
function errorHandler(err, res, next) {
    switch (err.message) {
        case 'object-invalid':
            return res.status(401).send({ message: 'Item inválido.' });
        case 'invalid-object-id':
            return res.status(401).send({ message: 'Parametro inválido.' });
        case 'parameter-not-expected':
            return res.status(401).send({ message: 'Parametro não experado.' });
        case 'item-not-found':
            return res.status(404).send({ message: 'Item não encontrado.' });
        default:
            next(err);
    }
}
//# sourceMappingURL=data:application/json;base64,