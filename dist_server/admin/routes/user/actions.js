"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const userService = require("../../services/User");
const userRepository = require("../../repositories/User");
const const_1 = require("../../../utils/const");
async function findById(req, res, next) {
    try {
        const result = await userService.findById(req.params.id);
        if (result)
            res.status(200).send(result);
        else
            res.status(401).send({ message: const_1.CONST.MSG.ERR.FINDBYID });
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.findById = findById;
async function list(req, res, next) {
    try {
        const result = await userService.list(req.params.filter);
        res.status(200).send(result);
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.list = list;
async function saveUser(req, res, next) {
    try {
        const result = await userService.saveUser(req.body);
        if (result)
            res.status(200).send({ message: const_1.CONST.MSG.SUCCESS.SAVE, user: result });
        else
            res.status(401).send({ message: const_1.CONST.MSG.ERR.SAVE });
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.saveUser = saveUser;
async function deleteUser(req, res, next) {
    try {
        const result = await userService.deleteUser(req.params.id);
        if (result)
            res.status(200).send({ message: const_1.CONST.MSG.SUCCESS.DELETE });
        else
            res.status(401).send({ message: const_1.CONST.MSG.ERR.DELETE });
    }
    catch (err) {
        next(err);
    }
}
exports.deleteUser = deleteUser;
async function updateUser(req, res, next) {
    try {
        const result = await userService.updateUser(req.body);
        if (result)
            res.status(200).send({ message: const_1.CONST.MSG.SUCCESS.UPDATE });
        else
            res.status(401).send({ message: const_1.CONST.MSG.ERR.UPDATE });
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.updateUser = updateUser;
async function changePassword(req, res, next) {
    try {
        const result = await userService.changePassword(req.body);
        if (result) {
            res.setHeader('X-Token', result);
            res.status(200).send({ message: 'Senha alterada com sucesso!' });
        }
        else
            res.status(401).send({ message: const_1.CONST.MSG.ERR.UPDATE });
    }
    catch (err) {
        errorHandler(err, res, next);
    }
}
exports.changePassword = changePassword;
async function lastInserts(req, res, next) {
    try {
        const result = await userRepository.lastInserts();
        res.status(200).send(result);
    }
    catch (err) {
        next(err);
    }
}
exports.lastInserts = lastInserts;
async function totUsers(req, res, next) {
    try {
        const result = await userRepository.selectCount();
        res.status(200).send({ count: result });
    }
    catch (err) {
        next(err);
    }
}
exports.totUsers = totUsers;
function errorHandler(err, res, next) {
    switch (err.message) {
        case 'user-already-created':
            return res.status(401).send({ message: 'Usuário já registrado.' });
        case 'object-invalid':
            return res.status(401).send({ message: 'Usuário inválido.' });
        case 'invalid-object-id':
            return res.status(401).send({ message: 'Parametro inválido.' });
        case 'parameter-not-expected':
            return res.status(401).send({ message: 'Parametro não experado.' });
        case 'user-not-found':
            return res.status(404).send({ message: 'Usuário não encontrado.' });
        case 'user-inactive':
            return res.status(403).send({ message: 'Usuário inativo.' });
        case 'invalid-password':
            return res.status(400).send({ message: 'Senha inválida.' });
        default:
            next(err);
    }
}
//# sourceMappingURL=data:application/json;base64,